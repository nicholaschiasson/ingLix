use serde::{Deserialize, Serialize};

#[allow(non_camel_case_types)]
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, PartialEq, Serialize)]
#[serde(try_from = "char")]
pub enum Grapheme {
	a,
	b,
	c,
	d,
	e,
	f,
	g,
	J,
	h,
	i,
	I,
	j,
	k,
	L,
	m,
	n,
	o,
	O,
	p,
	r,
	s,
	S,
	t,
	T,
	u,
	U,
	H,
	v,
	w,
	x,
	y,
	z,
}

impl Grapheme {
	pub fn name(&self) -> String {
		match self {
			Self::a => String::from("eI"),
			Self::b => String::from("bI"),
			Self::c => String::from("sI"),
			Self::d => String::from("dI"),
			Self::e => String::from("I"),
			Self::f => String::from("ef"),
			Self::g => String::from("jI"),
			Self::J => String::from("JI"),
			Self::h => String::from("eIc"),
			Self::i => String::from("aI"),
			Self::I => String::from("mI"),
			Self::j => String::from("jeI"),
			Self::k => String::from("keI"),
			Self::L => String::from("eL"),
			Self::m => String::from("em"),
			Self::n => String::from("en"),
			Self::o => String::from("O"),
			Self::O => String::from("nO"),
			Self::p => String::from("pI"),
			Self::r => String::from("ar"),
			Self::s => String::from("es"),
			Self::S => String::from("eS"),
			Self::t => String::from("tI"),
			Self::T => String::from("TI"),
			Self::u => String::from("yU"),
			Self::U => String::from("hU"),
			Self::H => String::from("hHm"),
			Self::v => String::from("vI"),
			Self::w => String::from("dHbLyU"),
			Self::x => String::from("eks"),
			Self::y => String::from("waI"),
			Self::z => String::from("zI"),
		}
	}
}

impl TryFrom<char> for Grapheme {
	type Error = String;

	fn try_from(c: char) -> Result<Self, Self::Error> {
		match c {
			'a' => Ok(Self::a),
			'b' => Ok(Self::b),
			'c' => Ok(Self::c),
			'd' => Ok(Self::d),
			'e' => Ok(Self::e),
			'f' => Ok(Self::f),
			'g' => Ok(Self::g),
			'J' => Ok(Self::J),
			'h' => Ok(Self::h),
			'i' => Ok(Self::i),
			'I' => Ok(Self::I),
			'j' => Ok(Self::j),
			'k' => Ok(Self::k),
			'L' => Ok(Self::L),
			'm' => Ok(Self::m),
			'n' => Ok(Self::n),
			'o' => Ok(Self::o),
			'O' => Ok(Self::O),
			'p' => Ok(Self::p),
			'r' => Ok(Self::r),
			's' => Ok(Self::s),
			'S' => Ok(Self::S),
			't' => Ok(Self::t),
			'T' => Ok(Self::T),
			'u' => Ok(Self::u),
			'U' => Ok(Self::U),
			'H' => Ok(Self::H),
			'v' => Ok(Self::v),
			'w' => Ok(Self::w),
			'x' => Ok(Self::x),
			'y' => Ok(Self::y),
			'z' => Ok(Self::z),
			_ => Err(format!("Invalid grapheme initialization '{}'", c)),
		}
	}
}

impl From<Grapheme> for char {
	fn from(grapheme: Grapheme) -> Self {
		match grapheme {
			Grapheme::a => 'a',
			Grapheme::b => 'b',
			Grapheme::c => 'c',
			Grapheme::d => 'd',
			Grapheme::e => 'e',
			Grapheme::f => 'f',
			Grapheme::g => 'g',
			Grapheme::J => 'J',
			Grapheme::h => 'h',
			Grapheme::i => 'i',
			Grapheme::I => 'I',
			Grapheme::j => 'j',
			Grapheme::k => 'k',
			Grapheme::L => 'L',
			Grapheme::m => 'm',
			Grapheme::n => 'n',
			Grapheme::o => 'o',
			Grapheme::O => 'O',
			Grapheme::p => 'p',
			Grapheme::r => 'r',
			Grapheme::s => 's',
			Grapheme::S => 'S',
			Grapheme::t => 't',
			Grapheme::T => 'T',
			Grapheme::u => 'u',
			Grapheme::U => 'U',
			Grapheme::H => 'H',
			Grapheme::v => 'v',
			Grapheme::w => 'w',
			Grapheme::x => 'x',
			Grapheme::y => 'y',
			Grapheme::z => 'z',
		}
	}
}
